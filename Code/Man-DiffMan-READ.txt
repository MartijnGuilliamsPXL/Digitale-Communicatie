#include "cy_pdl.h"
#include "cyhal.h"
#include "cybsp.h"
#include "GUI.h"
#include "mtb_st7789v.h"
#include "cy8ckit_028_tft_pins.h" /* This is part of the CY8CKIT-028-TFT shield library. */
#include "cy_retarget_io.h"

#define mySwPin_Port P0_4_PORT
#define mySwPin_Num P0_4_NUM
uint32_t pinReadValue = 0;
uint32_t teller = 0;
uint32_t leegBericht = 0;
uint8_t array[16] = {0};
uint8_t binCharArray[8] = {0};
uint32_t prevState = 2;
uint32_t LDRminValue = 80;


const mtb_st7789v_pins_t tft_pins =
{
    .db08 = CY8CKIT_028_TFT_PIN_DISPLAY_DB8,
    .db09 = CY8CKIT_028_TFT_PIN_DISPLAY_DB9,
    .db10 = CY8CKIT_028_TFT_PIN_DISPLAY_DB10,
    .db11 = CY8CKIT_028_TFT_PIN_DISPLAY_DB11,
    .db12 = CY8CKIT_028_TFT_PIN_DISPLAY_DB12,
    .db13 = CY8CKIT_028_TFT_PIN_DISPLAY_DB13,
    .db14 = CY8CKIT_028_TFT_PIN_DISPLAY_DB14,
    .db15 = CY8CKIT_028_TFT_PIN_DISPLAY_DB15,
    .nrd  = CY8CKIT_028_TFT_PIN_DISPLAY_NRD,
    .nwr  = CY8CKIT_028_TFT_PIN_DISPLAY_NWR,
    .dc   = CY8CKIT_028_TFT_PIN_DISPLAY_DC,
    .rst  = CY8CKIT_028_TFT_PIN_DISPLAY_RST
};

/*Baudrate for UART*/
#define BAUD_RATE       (115200)
/*Wait time between samples in milliseconds*/
#define WAIT_TIME        (100)

/* IIR filter coefficients. Sum of the two coefficients (A & B) should be a power of 2.
 * IIR shift co-efficient should be LOG(COEFF_A + COEFF_B) base 2 */
#define IIR_COEFF_A    (32)
#define IIR_COEFF_B    (32)
#define IIR_SHIFT      (6)

/* Flag to indicate filtered data is available */
uint8_t adc_eos_flag=0;
/* variable to store Filter result */
int32_t filtered_result=0;
/* variable to store ADC conversion result */
int32_t adc_out;


static void ISR_LDR(void* arg, cyhal_adc_event_t event)
{

    if(0u != (event & CYHAL_ADC_EOS))
    {
        /*Post-process result*/
        filtered_result = (adc_out * IIR_COEFF_A + filtered_result*IIR_COEFF_B) >> IIR_SHIFT;
        /*set the flag to print the result*/
        adc_eos_flag=1;
    }
}


int main(void)
{
    cy_rslt_t result;

    /* Initialize the device and board peripherals */
    result = cybsp_init() ;
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }
    /* Enable global interrupts */
    __enable_irq();

    //Cy_SysInit();

    /*Initialize retarget-io to use debug UART port*/
    cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX,BAUD_RATE);

    result = mtb_st7789v_init8(&tft_pins);
    CY_ASSERT(result == CY_RSLT_SUCCESS);

    GUI_Init();

    //GUI_DispString("Hello world!\n");

    cyhal_adc_t adc_obj;
    cyhal_adc_channel_t adc_chan_0_obj;

    /* Initialize ADC. The ADC block which can connect to pin 10[0] is selected */
    result = cyhal_adc_init(&adc_obj, P10_0, NULL);
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }
    /* Initialize ADC channel, allocate channel number 0 to pin 10[0] as this is the first channel initialized */
    const cyhal_adc_channel_config_t channel_config = { .enable_averaging = false, .min_acquisition_ns = 220, .enabled = true };
    result = cyhal_adc_channel_init_diff(&adc_chan_0_obj, &adc_obj, P10_0, CYHAL_ADC_VNEG, &channel_config);
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }
    /* Register a callback  */
     cyhal_adc_register_callback(&adc_obj, &ISR_LDR, NULL);

    /* Subscribe to the end of scan event so that we we can process the results as each scan completes*/

     pinReadValue = Cy_GPIO_Read(mySwPin_Port, mySwPin_Num);


    cyhal_adc_enable_event(&adc_obj, CYHAL_ADC_EOS, CYHAL_ISR_PRIORITY_DEFAULT, true);


    /* \x1b[2J\x1b[;H - ANSI ESC sequence for clear screen */
    //printf("\x1b[2J\x1b[;H");
    printf("\x1b[2J\x1b[;H");

	printf("***********************************************************\r\n");
	printf("PSoC 6 MCU UART Transmit and Receive\r\n");
	printf("***********************************************************\r\n\n");
	printf("\r\n\n");


	if(adc_eos_flag==1)
	{
		adc_eos_flag=0;
		/*Print Filtered result*/
	  //  printf("ADC_Count = %ld\n\r",filtered_result);
	}

	adc_out = cyhal_adc_read_u16(&adc_chan_0_obj);
	adc_out = adc_out/665;

	while(adc_out < LDRminValue)
	{
		//GUI_DispString("       Bit is  1");
		//printf("Waiting ");
		//printf("\r\n\n");
		adc_out = cyhal_adc_read_u16(&adc_chan_0_obj);
		adc_out = adc_out/665;
		//Cy_SysLib_Delay(WAIT_TIME);

	}
	Cy_SysLib_Delay(WAIT_TIME);



    for (;;)
    {
		if(adc_eos_flag==1)
		{
			adc_eos_flag=0;
			//Print Filtered result
		    //printf("ADC_Count = %ld\n\r",filtered_result);
		}

    	if(leegBericht == 16)
		{
			printf("Einde! \r\n\n");
			printf("\r\n\n");
			teller = 0;

			while(adc_out < LDRminValue)
			{
				//GUI_DispString("       Bit is  1");
				//printf("       Waiting ");
				//printf("\r\n\n");
				adc_out = cyhal_adc_read_u16(&adc_chan_0_obj);
				adc_out = adc_out/665;
				//Cy_SysLib_Delay(WAIT_TIME);

			}

			printf("Start: \r\n\n");
			Cy_SysLib_Delay(WAIT_TIME);
			leegBericht = 0;
			clearArray();
			prevState = 2;

		}

    	adc_out = cyhal_adc_read_u16(&adc_chan_0_obj);
    	adc_out = adc_out/665;


		if(adc_out > LDRminValue)
		{
			leegBericht = 0;
			array[teller] = 1;
		}
		else
		{
			array[teller] = 0;
			leegBericht++;
		}


        teller++;

        if(teller == 16)
        {
        	//manchesterDecoder();
        	diffManchesterDecoder();
        	convertToString(binCharArray, 8);
        	clearArray();
        	teller = 0;
        }

        Cy_SysLib_Delay(WAIT_TIME);
    }
}

void clearArray() {
    for (uint8_t i = 0; i < 16; i++) {
        array[i] = 0;
    }
    for (uint8_t i = 0; i < 8; i++) {
    	binCharArray[i] = 0;
    }
}

void printArray() {
	printf("Array: ");
	for (uint8_t i = 0; i < 8; i++) {
		printf("%d ", array[i]);
	}
	printf("\n");
}

void convertToString(uint8_t* array, int size) {
    printf("Converted string: ");
    for (int i = 0; i < size; i += 8) {
        uint8_t ascii = 0;
        for (int j = 0; j < 8; j++) {
            ascii = (ascii << 1) | array[i + j];
        }
        printf("%c", ascii);
    }
    printf("\r\n\n");
}


void manchesterDecoder(){
	for (uint8_t i = 0; i < 16; i=i+2) {
		if(array[i] == 1 && array[i+1] == 0){
			printf("0");
			binCharArray[i/2] = 0;
		}
		else if(array[i] == 0 && array[i+1] == 1){
			printf("1");
			binCharArray[i/2] = 1;
		}
		else {
			printf("F");
		}
	}
	printf("\r\n\n");
}


void diffManchesterDecoder(){
	if(array[0] == 1 && array[1] == 0){
		if(prevState == 0){
			printf("0");
			binCharArray[0] = 0;
		}
		else if(prevState == 1) {
			binCharArray[0] = 1;
		}
		else {
			printf("1");
			binCharArray[0] = 1;
		}
		prevState = 0;
	}
	else if(array[0] == 0 && array[1] == 1){
		if(prevState == 0){
			printf("1");
			binCharArray[0] = 1;
		}
		else if(prevState == 1) {
			printf("0");
			binCharArray[0] = 0;
		}
		else {
			printf("0");
			binCharArray[0] = 0;
		}
		prevState = 1;
	}
	else {
		printf("F");
		prevState = 0;
	}

	for (uint8_t i = 2; i < 16; i=i+2) {
		if(array[i] == 1 && array[i+1] == 0){
			if(prevState == 0){
				printf("0");
				binCharArray[i/2] = 0;
			}
			else {
				printf("1");
				binCharArray[i/2] = 1;
			}
			prevState = 0;
		}
		else if(array[i] == 0 && array[i+1] == 1){
			if(prevState == 0){
				printf("1");
				binCharArray[i/2] = 1;
			}
			else {
				printf("0");
				binCharArray[i/2] = 0;
			}
			prevState = 1;
		}
		else {
			printf("F");
		}
	}
	printf("\n");
}


/* [] END OF FILE */
